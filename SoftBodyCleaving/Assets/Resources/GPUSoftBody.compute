#pragma kernel ClearForces
#pragma kernel CalculateSpringForces
#pragma kernel CalculateSelfCollisions
#pragma kernel CalculateSphereCollisions
#pragma kernel CalculateDisplacement

struct Spring
{
	uint massA;
	uint massB;
	float equilibriumDistance;
};

struct Mass
{
	float3 position;
	float3 normal;
	float3 velocity;
	int resultantForceX;
	int resultantForceY;
	int resultantForceZ;
};

struct SphereCollider
{
	float3 position;
	float radius;
	float forceCoefficient;
};

float deltaTime;

float3 globalForce;

float windMagnitude;
float3 windDirection;

int capSpringForce;
float springCoefficient;
float dragCoefficient;
float pressureCoefficient;

int numSphereColliders;
int numMasses;

float selfCollisionRadius;
float selfCollisionForceCoefficient;

float3 worldPosition;
float3 localScale;

RWStructuredBuffer<Mass> masses;
StructuredBuffer<Spring> springs;
RWStructuredBuffer<SphereCollider> sphereColliders;

[numthreads(16, 1, 1)]
void ClearForces(uint3 id : SV_DispatchThreadID)
{
	masses[id.x].resultantForceX = 0;
	masses[id.x].resultantForceY = 0;
	masses[id.x].resultantForceZ = 0;
}

[numthreads(16, 1, 1)]
void CalculateSpringForces(uint3 id : SV_DispatchThreadID)
{
	Mass massA = masses[springs[id.x].massA];
	Mass massB = masses[springs[id.x].massB];

	//Calculates spring force using hooke's law	
	float massDistance = distance(massB.position, massA.position); // dl
	float springMagnitude = springCoefficient * (massDistance - springs[id.x].equilibriumDistance); // f = k * (dl - il)
	int3 springForce = normalize(massB.position - massA.position) * springMagnitude; // r

	int forceX = clamp(springForce.x, -capSpringForce, capSpringForce);
	int forceY = clamp(springForce.y, -capSpringForce, capSpringForce);
	int forceZ = clamp(springForce.z, -capSpringForce, capSpringForce);


	//Adds force to both masses
	InterlockedAdd(masses[springs[id.x].massA].resultantForceX, forceX);
	InterlockedAdd(masses[springs[id.x].massA].resultantForceY, forceY);
	InterlockedAdd(masses[springs[id.x].massA].resultantForceZ, forceZ);

	InterlockedAdd(masses[springs[id.x].massB].resultantForceX, -forceX);
	InterlockedAdd(masses[springs[id.x].massB].resultantForceY, -forceY);
	InterlockedAdd(masses[springs[id.x].massB].resultantForceZ, -forceZ);
}

[numthreads(16, 1, 1)]
void CalculateSelfCollisions(uint3 id : SV_DispatchThreadID)
{
	if (numMasses > 0)
	{
		int interactions = 0;

		while (interactions < numMasses)
		{
			float3 massOffset = ((masses[id.x].position * localScale) + worldPosition)
				- ((masses[interactions].position* localScale) + worldPosition);
			float offsetMagnitude = length(massOffset);

			if (offsetMagnitude < selfCollisionRadius)
			{
				float3 massOffsetNorm = normalize(massOffset);
				float3 force = massOffsetNorm * selfCollisionForceCoefficient;

				InterlockedAdd(masses[id.x].resultantForceX, (int)(force.x));
				InterlockedAdd(masses[id.x].resultantForceY, (int)(force.y));
				InterlockedAdd(masses[id.x].resultantForceZ, (int)(force.z));
			}
			interactions++;
		}
	}

}

[numthreads(16, 1, 1)]
void CalculateSphereCollisions(uint3 id : SV_DispatchThreadID)
{
	if (numSphereColliders > 0)
	{
		int interactions = 0;

		while (interactions < numSphereColliders)
		{
			float3 massOffset = ((masses[id.x].position * localScale) + worldPosition) - sphereColliders[interactions].position;
			float offsetMagnitude = length(massOffset);

			if (offsetMagnitude < sphereColliders[interactions].radius)
			{
				float3 massOffsetNorm = normalize(massOffset);
				float3 force = massOffsetNorm * sphereColliders[interactions].forceCoefficient;

				InterlockedAdd(masses[id.x].resultantForceX, (int)(force.x));
				InterlockedAdd(masses[id.x].resultantForceY, (int)(force.y));
				InterlockedAdd(masses[id.x].resultantForceZ, (int)(force.z));
			}
			interactions++;
		}
	}

}

[numthreads(16, 1, 1)]
void CalculateDisplacement(uint3 id : SV_DispatchThreadID)
{
	float3 force = float3(masses[id.x].resultantForceX,
		masses[id.x].resultantForceY, masses[id.x].resultantForceZ);
	force += globalForce;
	force += masses[id.x].normal * pressureCoefficient;

	masses[id.x].velocity = masses[id.x].velocity + (force * deltaTime);
	masses[id.x].velocity -= dragCoefficient * masses[id.x].velocity;

	masses[id.x].resultantForceX = 0;
	masses[id.x].resultantForceY = 0;
	masses[id.x].resultantForceZ = 0;
}
